                
pipeline {
    environment {
    docker = '/usr/local/bin/docker-compose'
  //  dockerTool = 'docker'  // Use the tool name specified in Jenkins configuration
    
  }
    agent any


    tools {
        nodejs 'NodeJS 14'
        dockerTool 'docker'
    }
 
    stages {
        stage('Cloning Git') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/omarUSJ/devops23.git']]])  
                sh "ls "
                sh "whoami"
                script {
           		 def npmExecutable = tool name: 'NodeJS 14', type: 'jenkins.plugins.nodejs.tools.NodeJSInstallation'
            		 sh "${npmExecutable}/bin/npm install -g npm yarn"
            		 sh "${npmExecutable}/bin/npm install"
       			 }		
                echo 'Project Cloned'
            }
        }

       stage('Docker Build') {
            steps {
                echo 'Building..'
                script {
                    // Build the Docker image using the specified Dockerfile
                    // The image will be tagged as 'dockerdevopstest'
                 //   sh 'docker build -t dockerdevopstest .'
        def dockerBuildOutput = sh(script: 'docker build -t dockerdevopstest .', returnStatus: true, returnStdout: true)
            echo "Docker Build Output: ${dockerBuildOutput}"
                }
                echo 'Running...'
            }
        }

    
      stage('Test') {
            steps {
        script {
            echo 'Testing..'
            def nodeImage = 'node:14'

            // Define the Docker image to be used for testing
            def dockerImage = docker.image(nodeImage)

            // Run tests inside a Node.js Docker container
            container(dockerImage) {
                // Inside the container, install dependencies and run tests
                sh 'npm install'
                sh 'npm test'
            }
        }
    }
           post {
                success {
                    echo 'Sending email notification...'
                    emailext subject: 'Test Status: SUCCESS',
                              body: 'The tests have passed successfully.',
                              to: 'omar.zarrade@net.usj.edu.lb'
                }
        failure {
                    echo 'Sending email notification...'
                    emailext subject: 'Test Status: FAILURE',
                              body: 'The tests have failed.',
                              to: 'omar.zarrade@net.usj.edu.lb'
                }
            }
        }
        stage('Deploy') {
            steps {
        script {
            echo 'Merging pull request and cleaning up...'
            // Check if tests passed
            def testsPassed = sh(script: 'npm test', returnStatus: true) == 0
    // If tests passed, merge the pull request and clean up
            if (testsPassed) {
           withCredentials([string(credentialsId: 'your-github-token', variable: 'TOKEN')]) {
                    sh "curl -s -X PUT -H 'Authorization: Bearer \${GITHUB_TOKEN}' -d '{\"commit_title\":\"Merge PR\"}' 'https://github.com/omarUSJ/devops23.git'"
                }
                echo 'Pull request merged successfully.'
            } else {
                echo 'Tests failed. Pull request will not be automatically merged.'
            }
            // Cleanup: Terminate the testing cluster
            def clusterName = sh(script: 'echo $BUILD_TAG', returnStdout: true).trim()
            sh "your-cluster-termination-command $clusterName"
            echo 'Testing cluster terminated.'
        }
        }
    }
}
}
