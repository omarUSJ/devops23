                
pipeline {
    environment {
    docker = '/usr/local/bin/docker-compose'
  //  dockerTool = 'docker'  // Use the tool name specified in Jenkins configuration
    
  }
    agent any


    tools {
        nodejs 'NodeJS 14'
        dockerTool 'docker'
    }
 
    stages {
        stage('Cloning Git') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/omarUSJ/devops23.git']]])  
                sh "ls "
                sh "whoami"
                script {
           		 def npmExecutable = tool name: 'NodeJS 14', type: 'jenkins.plugins.nodejs.tools.NodeJSInstallation'
            		 sh "${npmExecutable}/bin/npm install -g npm yarn"
            		 sh "${npmExecutable}/bin/npm install"
       			 }		
                echo 'Project Cloned'
            }
        }
  stage('Install Docker Compose') {
            steps {
                script {
                    // Download and install Docker Compose
                    sh 'curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-Linux-x86_64" -o $HOME/docker-compose'
                    sh 'chmod +x $HOME/docker-compose'
                    sh 'mkdir -p $HOME/bin'
                    sh 'mv $HOME/docker-compose $HOME/bin/docker-compose'

                    // Print Docker Compose version for verification
                    sh '$HOME/bin/docker-compose --version'
                }
            }
        }

    
stage('Check Docker') {
    steps {
        script {
            // Print Docker version
            sh 'docker --version'

            // Print Docker info
            sh 'docker info'
        }
    }
}



      stage('Docker Build') {
    agent {
        docker {
            // Specify the Dockerfile path relative to the Jenkinsfile location
            file 'Dockerfile'
            reuseNode true // Reuse the same agent for consecutive builds
            label 'docker' // Label for the agent
        }
    }

    steps {
        echo 'Building..'
        script {
            // Build the Docker image using the specified Dockerfile
            // The image will be tagged as 'dockerdevopstest'
            sh 'docker build -t dockerdevopstest .'
        }
        echo 'Running...'
    }
}

    
        stage('Test') {
            steps {
                echo 'Testing..'
                sh 'npm test'
            }
        }
        stage('Deploy') {
            steps {
                echo 'Deploying....'
            }
        }
    }
}
